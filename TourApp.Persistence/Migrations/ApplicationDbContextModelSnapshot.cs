// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TourApp.Persistence.DbContext;

#nullable disable

namespace TourApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TourApp.Domain.Entities.AppUserIdentity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varbinary(512)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("AppUserIdentities", (string)null);
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Booking.TourBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomersCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PayedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TourId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("TourBookings", (string)null);

                    b.HasCheckConstraint("CK_TourBooking_TourCustomersCount", "[CustomersCount] > 0");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Tour.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Difficulty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<string>("DisplayImageName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("RemainingPlaces")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StopCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.ToTable("Tours", (string)null);

                    b.HasCheckConstraint("CK_TourDetails_Rating", "[Rating] BETWEEN 0 AND 5");

                    b.HasCheckConstraint("CK_TourDetails_StartDate", "[StartDate] > CAST( GETUTCDATE() AS date)");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Tour.TourPricingDetails", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("AccommodationFee")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("EquipmentRentPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("GuideFee")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("MealFee")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("TransportationFee")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("TourPricingDetails", (string)null);
                });

            modelBuilder.Entity("TourApp.Domain.Entities.User.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TourApp.Domain.Entities.User.AppUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AppUserRoles", (string)null);
                });

            modelBuilder.Entity("TourApp.Domain.Entities.User.TourCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("TourCustomers", (string)null);

                    b.HasCheckConstraint("CK_TourCustomer_Age", "[Age] > 0");
                });

            modelBuilder.Entity("TourBookingTourCustomer", b =>
                {
                    b.Property<int>("TourBookingsId")
                        .HasColumnType("int");

                    b.Property<int>("TourCustomersId")
                        .HasColumnType("int");

                    b.HasKey("TourBookingsId", "TourCustomersId");

                    b.HasIndex("TourCustomersId");

                    b.ToTable("TourBookingTourCustomer");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.AppUserIdentity", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.User.AppUser", "User")
                        .WithOne("Identity")
                        .HasForeignKey("TourApp.Domain.Entities.AppUserIdentity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Booking.TourBooking", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.Tour.Tour", "Tour")
                        .WithOne()
                        .HasForeignKey("TourApp.Domain.Entities.Booking.TourBooking", "TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourApp.Domain.Entities.User.AppUser", "User")
                        .WithMany("TourBookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Tour.TourPricingDetails", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.Tour.Tour", null)
                        .WithOne("TourPricingDetails")
                        .HasForeignKey("TourApp.Domain.Entities.Tour.TourPricingDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourApp.Domain.Entities.User.AppUser", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.User.AppUserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("TourApp.Domain.Entities.User.Common.AppUserAddress", "Address", b1 =>
                        {
                            b1.Property<int>("AppUserId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .HasMaxLength(80)
                                .HasColumnType("nvarchar(80)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Region")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("AppUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TourBookingTourCustomer", b =>
                {
                    b.HasOne("TourApp.Domain.Entities.Booking.TourBooking", null)
                        .WithMany()
                        .HasForeignKey("TourBookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TourApp.Domain.Entities.User.TourCustomer", null)
                        .WithMany()
                        .HasForeignKey("TourCustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourApp.Domain.Entities.Tour.Tour", b =>
                {
                    b.Navigation("TourPricingDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("TourApp.Domain.Entities.User.AppUser", b =>
                {
                    b.Navigation("Identity")
                        .IsRequired();

                    b.Navigation("TourBookings");
                });

            modelBuilder.Entity("TourApp.Domain.Entities.User.AppUserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
